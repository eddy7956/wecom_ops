from flask import Blueprint
from app.api.v1.tp_import.routes import bp as import_bp

# 只注册已存在的 mass 路由
from app.api.v1.mass.routes import bp as mass_bp

v1 = Blueprint("v1", __name__, url_prefix="/api/v1")
# 注册导入相关API
# TEMP-DISABLED: v1.register_blueprint(import_bp)
v1.register_blueprint(mass_bp)

# （可选）安全注册其他模块：存在才挂载，不存在就忽略，避免启动失败
def _safe_register(module_path: str, attr: str = "bp"):
    try:
        mod = __import__(module_path, fromlist=[attr])
        bp = getattr(mod, attr)
        v1.register_blueprint(bp)
    except Exception as _:
        # 这里故意忽略（可加日志），保证服务能起来
        pass

# 以后有文件时再放开：
# _safe_register("app.api.v1.org.routes")
# _safe_register("app.api.v1.ext.routes")
# _safe_register("app.api.v1.system.routes")

@v1.route("/__routes", methods=["GET"])
def __routes():
    from flask import current_app
    routes = []
    for r in current_app.url_map.iter_rules():
        routes.append({"rule": str(r), "methods": sorted([m for m in r.methods if m not in ("HEAD","OPTIONS")])})
    return {"ok": True, "data": routes}
